# -*- coding: utf-8 -*-
"""Train and Save Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k2FvsnvpCyw6wtzmlSTEPrexgZ2efPHV
"""

import pandas as pd
import joblib
import warnings
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.neural_network import MLPRegressor

warnings.filterwarnings('ignore')

def train_and_save_model():
    """Trains the best model and saves the necessary files."""
    print("--- Starting model training ---")

    training_data = [
        ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 16], ['a', 'b', 'a', 'b', 'a', 'a', 'b', 'b', 'b', 'a', 'b', 'a', 22],
        ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 28], ['c', 'c', 'c', 'b', 'c', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 45],
        ['d', 'd', 'c', 'c', 'd', 'c', 'd', 'd', 'd', 'd', 'd', 'd', 65], ['b', 'c', 'b', 'c', 'b', 'c', 'c', 'b', 'c', 'b', 'c', 'b', 35],
        ['a', 'a', 'b', 'a', 'b', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 19], ['d', 'c', 'd', 'd', 'c', 'd', 'd', 'c', 'd', 'd', 'c', 'd', 58],
        ['c', 'c', 'b', 'a', 'c', 'b', 'b', 'c', 'c', 'c', 'b', 'c', 41], ['a', 'b', 'b', 'b', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'b', 25],
        ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 52], ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 70],
        ['b', 'c', 'a', 'b', 'c', 'b', 'a', 'c', 'b', 'c', 'a', 'b', 31], ['c', 'b', 'd', 'c', 'b', 'd', 'c', 'b', 'd', 'c', 'b', 'd', 55]
    ]

    columns = [f'q{i+1}' for i in range(12)] + ['age']
    df = pd.DataFrame(training_data, columns=columns)
    X = df.iloc[:, :-1]
    y = df.iloc[:, -1]

    categorical_features = [f'q{i+1}' for i in range(12)]
    preprocessor = ColumnTransformer(
        transformers=[('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)])

    preprocessor.fit(X)
    X_processed = preprocessor.transform(X)

    print("Training MLP Regressor (Neural Network)...")
    model = MLPRegressor(random_state=42, max_iter=1000)
    model.fit(X_processed, y)

    joblib.dump(model, 'model.joblib')
    joblib.dump(preprocessor, 'preprocessor.joblib')

    print("\nâœ… Model and preprocessor saved successfully to 'backend' folder!")

if __name__ == '__main__':
    train_and_save_model()